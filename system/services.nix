# Auto-generated using compose2nix v0.3.2-pre.
{
  pkgs,
  lib,
  config,
  ...
}:

{
  # Runtime
  virtualisation.podman = {
    enable = true;
    autoPrune.enable = true;
    dockerCompat = false;
  };

  # Enable container name DNS for all Podman networks.
  networking.firewall.interfaces =
    let
      matchAll = if !config.networking.nftables.enable then "podman+" else "podman*";
    in
    {
      "${matchAll}".allowedUDPPorts = [ 53 ];
    };

  virtualisation.oci-containers.backend = "podman";

  # Containers
  virtualisation.oci-containers.containers."ntfy" = {
    image = "binwiederhier/ntfy";
    environment = {
      "TZ" = "JST";
    };
    volumes = [
      "/etc/ntfy:/etc/ntfy:rw"
      "/var/cache/ntfy:/var/cache/ntfy:rw"
      "/home/toma/.workspace/github.com/whtsht/dotfiles/system/ntfy-server.yml:/etc/ntfy/server.yml:ro"
    ];
    ports = [
      "8001:80/tcp"
    ];
    cmd = [ "serve" ];
    log-driver = "journald";
    extraOptions = [
      "--health-cmd=wget -q --tries=1 http://localhost:80/v1/health -O - | grep -Eo '\"healthy\"\\s*:\\s*true' || exit 1"
      "--health-interval=1m0s"
      "--health-retries=3"
      "--health-start-period=40s"
      "--health-timeout=10s"
      "--network-alias=ntfy"
      "--network=ntfy_default"
    ];
  };
  systemd.services."podman-ntfy" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-ntfy_default.service"
    ];
    requires = [
      "podman-network-ntfy_default.service"
    ];
    partOf = [
      "podman-compose-ntfy-root.target"
    ];
    wantedBy = [
      "podman-compose-ntfy-root.target"
    ];
  };

  # Networks
  systemd.services."podman-network-ntfy_default" = {
    path = [ pkgs.podman ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f ntfy_default";
    };
    script = ''
      podman network inspect ntfy_default || podman network create ntfy_default
    '';
    partOf = [ "podman-compose-ntfy-root.target" ];
    wantedBy = [ "podman-compose-ntfy-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-ntfy-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };

  # Tailscale serve service
  systemd.services."tailscale-serve-ntfy" = {
    description = "Tailscale serve for ntfy on port 8001";
    after = [
      "tailscale.service"
      "podman-ntfy.service"
    ];
    wants = [
      "tailscale.service"
      "podman-ntfy.service"
    ];
    wantedBy = [ "multi-user.target" ];

    serviceConfig = {
      Type = "exec";
      Restart = "on-failure";
      RestartSec = "5s";
      User = "root";
    };

    script = ''
      # Wait for Tailscale to be ready
      until ${pkgs.tailscale}/bin/tailscale status --json >/dev/null 2>&1; do
        echo "Waiting for Tailscale to be ready..."
        sleep 2
      done

      # Wait for ntfy to be ready
      until ${pkgs.curl}/bin/curl -s http://localhost:8001/v1/health >/dev/null 2>&1; do
        echo "Waiting for ntfy to be ready..."
        sleep 2
      done

      # Start Tailscale serve
      ${pkgs.tailscale}/bin/tailscale serve --https=443 localhost:8001
    '';

    preStop = ''
      ${pkgs.tailscale}/bin/tailscale serve --https=443 off || true
    '';
  };
}
